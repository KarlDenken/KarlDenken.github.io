<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何在远程使用Jupyter Notebook</title>
    <link href="/2020/04/04/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%BF%9C%E7%A8%8B%E7%BB%88%E7%AB%AF%E4%B8%8A%E4%BD%BF%E7%94%A8jupternoteboook/"/>
    <url>/2020/04/04/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%BF%9C%E7%A8%8B%E7%BB%88%E7%AB%AF%E4%B8%8A%E4%BD%BF%E7%94%A8jupternoteboook/</url>
    
    <content type="html"><![CDATA[<h1 id="如何在远程使用Jupter-Notebook"><a href="#如何在远程使用Jupter-Notebook" class="headerlink" title="如何在远程使用Jupter Notebook"></a>如何在远程使用Jupter Notebook</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于很多同学而言，做研究，尤其是做人工智能的研究，都需要一台很强大的电脑。但是现在可以跑起来的电脑往往耗资巨大。很多学校都是使用一台强大的服务器，然后给学生们提供一个账号，利用这个账号登陆进行处理。但是这就出现了一个问题。很多同学已经习惯了使用Jupyter Notebook来进行可视化处理，对于远程的Linux服务器，如何可以使用Jupter Notebook呢？这篇文章就简要的告诉你如何处理这样的问题。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="登陆服务器"><a href="#登陆服务器" class="headerlink" title="登陆服务器"></a>登陆服务器</h3><p>首先需要 <strong>登陆你的远程Linux服务器</strong></p><pre><code class="shell">ssh &lt;your_ip_address&gt; -p &lt;your_port&gt;</code></pre><p>并在内部建立一个<code>jup</code>文件夹，用来存放notebook文件</p><h3 id="安装Jupyter-Notebook"><a href="#安装Jupyter-Notebook" class="headerlink" title="安装Jupyter Notebook"></a>安装Jupyter Notebook</h3><p>如果是使用的anaconda或者是miniconda，jupyter notebook已经安装好了。如果没有，需要在服务器端安装jupyter notebook</p><pre><code class="shell">conda install jupyter Notebook</code></pre><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><p>安装好了Jupyter Notebook，就需要来生成配置文件。如果是第一次设置配置文件，需要先生成配置文件</p><pre><code class="shell">jupyter notebook --generate-config</code></pre><p>生成文件之后，需要设置密码。如果密码是123456，则应该操作为</p><pre><code class="shell">&gt;&gt;&gt; from notebook.auth import passwd&gt;&gt;&gt; passwd(&#39;123456&#39;)&#39;sha1:xxxxxxxxxxxxxxxxxxxxxxxx&#39;</code></pre><p>会返回一个sha1密码，然后用vim打开刚刚的配置文件（一般会在根目录/.jupyter/jupyter_notebook_config.py），在开头插入下列一些代码</p><pre><code class="python">c.NotebookApp.ip=&#39;0.0.0.0&#39; # 广播给所有人c.NotebookApp.password = u&#39;&lt;密码&gt;&#39; # &lt;密码&gt;就是之前的sha1:xxxxxxxxxxxxc.NotebookApp.open_browser = False # 不打开浏览器c.NotebookApp.port = 8050 # 使用8050作为跳转的接口</code></pre><h3 id="设置后台运行"><a href="#设置后台运行" class="headerlink" title="设置后台运行"></a>设置后台运行</h3><p>成功设置之后，我们更需要Jupyter Notebook在后台运行。这样我们无论什么时候运行，只需要打开网页，我们就可以使用Jupyter Notebook了。这样更加方便。我们需要的指令就是<code>nohup</code></p><pre><code class="shell">cd &lt;your_directory&gt;nohup jupyter notebook --no-browser --port 8050 --ip=&lt;your ip&gt; 2&gt;&amp;1 &amp;</code></pre><p>其中<code>nohup</code>的目的就是不挂断的运行程序。并且在最后我们使用<code>&amp;</code>来保证在后台运行。我们开始jupyter notebook，不用浏览器，端口好设置为8050，ip地址设置为地址，<code>2&gt;&amp;1</code>中，&amp;1表示文件描述符，也就是标准输出stdout，2则表示标准错误，也就是stderr。整个的意思就是将标准错误重定向到标准输出。由于nohup会自动生成一个nohup log记录活动。这样的指令可以使所有的错误和标准指令都保存在nohup内部</p><h3 id="使用Jupyter-Notebook"><a href="#使用Jupyter-Notebook" class="headerlink" title="使用Jupyter Notebook"></a>使用Jupyter Notebook</h3><p>现在，打开任意浏览器，输入地址<code>https://&lt;your ip&gt;:8050/</code>，然后开始愉快的使用jupyter notebook吧</p>]]></content>
    
    
    <categories>
      
      <category>小技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>远程</tag>
      
      <tag>Jupyter Notebook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020</title>
    <link href="/2020/04/02/2020/"/>
    <url>/2020/04/02/2020/</url>
    
    <content type="html"><![CDATA[<h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><p>回首2019，有那么多想干的事情没有干。原先想着到了2020年了，可以再加一把劲把事情都干完。可是突如其来的疫情，却彻底打乱了我的节奏。写下这段文字的时候，2020年转眼间已经过去了1/4，可是我却度过了人生有史以来最舒服的几个月。没有考虑任何东西，没有学习到任何东西。回望我的同学们，都利用这段时间进行了大范围的联系，可是我却白白浪费了。</p><p>好在意识到这个问题还不算晚，现在开始我也要好好学习，天天向上了。</p>]]></content>
    
    
    <categories>
      
      <category>自我</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自我反省</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/04/02/hello-world/"/>
    <url>/2020/04/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
